{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/api/auth/login": {
            "post": {
                "description": "Authenticate user with username and password. Returns access and refresh JWT tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login request body (username, password)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login with access and refresh tokens",
                        "schema": {
                            "$ref": "#/definitions/api.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or incorrect credentials",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Account not active, cannot login",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "description": "Invalidate all tokens for logout",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User logout",
                "parameters": [
                    {
                        "description": "Logout body: refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful logout, all tokens is invalidate",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or incorrect credentials",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Account not active, cannot login",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/password/request": {
            "post": {
                "description": "Sends a password reset email to the specified email address if the account exists.\nThe email will contain a link or OTP to reset the user's password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Send password reset request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email address",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email sent successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessMessage"
                        }
                    },
                    "400": {
                        "description": "No account with this email or invalid input",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failed to communicate with Directus",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/password/reset": {
            "post": {
                "description": "Resets the user's password using a valid password reset token.\nThe token must be provided in the request body and is validated for authenticity and expiration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "description": "Password reset request body containing token and new password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failed to communicate with Directus",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/refresh": {
            "post": {
                "description": "Uses the provided refresh token to obtain a new access token and refresh token from Directus.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh authentication tokens",
                "parameters": [
                    {
                        "description": "Request body containing the refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New tokens generated successfully",
                        "schema": {
                            "$ref": "#/definitions/api.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failed to communicate with Directus",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "description": "Creates a new user account with the provided username, email, phone, password, and role.\nSends a verification email to activate the account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user account",
                "parameters": [
                    {
                        "description": "Registration request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create account success with status inactive",
                        "schema": {
                            "$ref": "#/definitions/api.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or existing username/email/phone",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failed to send verification email",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/resend-otp/{id}": {
            "post": {
                "description": "Resends a new OTP code to the user's registered email address if the account is still inactive.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Resend account verification OTP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP resent successfully",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or account not inactive",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/verify/{id}": {
            "post": {
                "description": "Verifies a user's account using the provided OTP code sent to their email.\nOnce verified, the user's account status is set to active.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Verify user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "6-digit OTP verification code",
                        "name": "otp",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verify account successfully, please login",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid OTP, expired code, or ID mismatch",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/categories": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a list of all available event categories from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Retrieve all categories",
                "responses": {
                    "200": {
                        "description": "List of categories retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Category"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a list of published events with minimal information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "List all events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by event name (case-insensitive contains)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by city or country (case-insensitive contains)",
                        "name": "location",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by category name (case-insensitive contains)",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by minimum base price",
                        "name": "min_price",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by maximum base price",
                        "name": "max_price",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit number of results (default: 50)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort field (default: -date_created). Use - prefix for descending",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of events retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.EventInfo"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/events/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns detailed information about a specific event, including category, images, and schedule data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Retrieve a single event by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/api.EventDetail"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing event ID",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Event not found or not published",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failed to communicate with Directus",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/memberships": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all published membership tiers sorted by resulting points in ascending order.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Memberships"
                ],
                "summary": "List all published membership tiers",
                "responses": {
                    "200": {
                        "description": "List of memberships retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.MembershipTier"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failed to communicate with Directus",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/memberships/{user_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Calculate points from total payments (100,000 VND = 10 points) and determine tier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Memberships"
                ],
                "summary": "Get customer membership info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer membership info",
                        "schema": {
                            "$ref": "#/definitions/api.MembershipResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "User profile",
                "responses": {
                    "200": {
                        "description": "user profile",
                        "schema": {
                            "$ref": "#/definitions/api.ProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or incorrect credentials",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Account not active, cannot login",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the current user's profile information including first name, last name, password, and avatar.\nThe avatar is expected to be a base64-encoded image, which will be uploaded to cloud storage and replaced with its secure URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Profile update request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.UpdateProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "schema": {
                            "$ref": "#/definitions/api.ProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Category": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "api.Creator": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "api.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "api.EventDetail": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "categories": {
                    "$ref": "#/definitions/api.Category"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "creator": {
                    "$ref": "#/definitions/api.Creator"
                },
                "description": {
                    "type": "string"
                },
                "event_schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.EventSchedule"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "preview_image": {
                    "type": "string"
                },
                "seat_zones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.SeatZone"
                    }
                },
                "slug": {
                    "type": "string"
                },
                "tickets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Ticket"
                    }
                }
            }
        },
        "api.EventInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "base_price": {
                    "description": "Minimum ticket price",
                    "type": "integer"
                },
                "category": {
                    "$ref": "#/definitions/api.Category"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "preview_image": {
                    "type": "string"
                },
                "start_time": {
                    "description": "Closest upcoming schedule time",
                    "type": "string"
                }
            }
        },
        "api.EventSchedule": {
            "type": "object",
            "properties": {
                "end_checkin_time": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "start_checkin_time": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "api.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "api.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "api.LogoutRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "api.MembershipResponse": {
            "type": "object",
            "properties": {
                "discount": {
                    "type": "number"
                },
                "early_buy_time": {
                    "type": "integer"
                },
                "points": {
                    "type": "integer"
                },
                "tier": {
                    "type": "string"
                }
            }
        },
        "api.MembershipTier": {
            "type": "object",
            "properties": {
                "base_point": {
                    "type": "integer"
                },
                "discount": {
                    "description": "Can be string or number from Directus",
                    "type": "number"
                },
                "early_buy_time": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tier": {
                    "type": "string"
                }
            }
        },
        "api.ProfileResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                }
            }
        },
        "api.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname",
                "password",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "api.RegisterResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "api.ResetPasswordRequest": {
            "type": "object",
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "api.Seat": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "seat_number": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "api.SeatZone": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "seats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Seat"
                    }
                },
                "total_seats": {
                    "type": "integer"
                }
            }
        },
        "api.SuccessMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "api.Ticket": {
            "type": "object",
            "properties": {
                "base_price": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "rank": {
                    "type": "string"
                },
                "ticket_selling_schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.TicketSellingSchedule"
                    }
                }
            }
        },
        "api.TicketSellingSchedule": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "integer"
                },
                "end_selling_time": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "start_selling_time": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "api.UpdateProfileRequest": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}