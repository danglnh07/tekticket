definitions:
  api.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  api.Event:
    properties:
      capacity:
        type: integer
      category:
        type: string
      date_created:
        type: string
      description:
        type: string
      end_time:
        type: string
      id:
        type: string
      image:
        type: string
      location:
        type: string
      name:
        type: string
      organizer:
        type: string
      price:
        type: number
      start_time:
        type: string
      status:
        type: string
      tickets_sold:
        type: integer
    type: object
  api.EventListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/api.Event'
        type: array
      meta:
        $ref: '#/definitions/api.Meta'
    type: object
  api.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  api.LoginResponse:
    properties:
      access_token:
        type: string
      expires:
        type: integer
      id:
        type: string
      refresh_token:
        type: string
    type: object
  api.LogoutRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  api.Meta:
    properties:
      filter_count:
        type: integer
      limit:
        type: integer
      offset:
        type: integer
      total_count:
        type: integer
    type: object
  api.ProfileResponse:
    properties:
      avatar:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      location:
        type: string
    type: object
  api.RegisterRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
      role:
        type: string
    required:
    - email
    - firstname
    - lastname
    - password
    - role
    type: object
  api.RegisterResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      role:
        type: string
      status:
        type: string
    type: object
  api.ResetPasswordRequest:
    properties:
      new_password:
        type: string
      token:
        type: string
    type: object
  api.SuccessMessage:
    properties:
      message:
        type: string
    type: object
  api.UpdateProfileRequest:
    properties:
      avatar:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      location:
        type: string
      password:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password. Returns access and
        refresh JWT tokens.
      parameters:
      - description: Login request body (username, password)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login with access and refresh tokens
          schema:
            $ref: '#/definitions/api.LoginResponse'
        "400":
          description: Invalid request body or incorrect credentials
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Account not active, cannot login
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: User login
      tags:
      - Auth
  /api/auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate all tokens for logout
      parameters:
      - description: 'Logout body: refresh token'
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful logout, all tokens is invalidate
          schema:
            $ref: '#/definitions/api.SuccessMessage'
        "400":
          description: Invalid request body or incorrect credentials
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Account not active, cannot login
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: User logout
      tags:
      - Auth
  /api/auth/password/request:
    post:
      consumes:
      - application/json
      description: |-
        Sends a password reset email to the specified email address if the account exists.
        The email will contain a link or OTP to reset the user's password.
      parameters:
      - description: User email address
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            $ref: '#/definitions/api.SuccessMessage'
        "400":
          description: No account with this email or invalid input
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error or failed to communicate with Directus
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Send password reset request
      tags:
      - Auth
  /api/auth/password/reset:
    post:
      consumes:
      - application/json
      description: |-
        Resets the user's password using a valid password reset token.
        The token must be provided in the request body and is validated for authenticity and expiration.
      parameters:
      - description: Password reset request body containing token and new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/api.SuccessMessage'
        "400":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error or failed to communicate with Directus
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Reset user password
      tags:
      - Auth
  /api/auth/refresh:
    post:
      consumes:
      - application/json
      description: Uses the provided refresh token to obtain a new access token and
        refresh token from Directus.
      parameters:
      - description: Request body containing the refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: New tokens generated successfully
          schema:
            $ref: '#/definitions/api.LoginResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error or failed to communicate with Directus
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Refresh authentication tokens
      tags:
      - Auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: |-
        Creates a new user account with the provided username, email, phone, password, and role.
        Sends a verification email to activate the account.
      parameters:
      - description: Registration request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Create account success with status inactive
          schema:
            $ref: '#/definitions/api.RegisterResponse'
        "400":
          description: Invalid request body or existing username/email/phone
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error or failed to send verification email
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Register a new user account
      tags:
      - Auth
  /api/auth/resend-otp/{id}:
    post:
      consumes:
      - application/json
      description: Resends a new OTP code to the user's registered email address if
        the account is still inactive.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OTP resent successfully
          schema:
            $ref: '#/definitions/api.SuccessMessage'
        "400":
          description: Invalid ID or account not inactive
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Resend account verification OTP
      tags:
      - Auth
  /api/auth/verify/{id}:
    post:
      consumes:
      - application/json
      description: |-
        Verifies a user's account using the provided OTP code sent to their email.
        Once verified, the user's account status is set to active.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: 6-digit OTP verification code
        in: query
        name: otp
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Verify account successfully, please login
          schema:
            $ref: '#/definitions/api.SuccessMessage'
        "400":
          description: Invalid OTP, expired code, or ID mismatch
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Verify user account
      tags:
      - Auth
  /api/events:
    get:
      consumes:
      - application/json
      description: |-
        Returns a paginated list of events with optional filters for search, category, location, date, and status.
        If `chose_date` is provided, only events that are active during that date will be returned.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Search by event title or description
        in: query
        name: search
        type: string
      - description: Filter by category ID
        in: query
        name: category
        type: string
      - description: Filter by location
        in: query
        name: location
        type: string
      - description: Filter events active on this date (YYYY-MM-DD or ISO format)
        in: query
        name: chose_date
        type: string
      - description: 'Filter by status (default: published)'
        in: query
        name: status
        type: string
      - description: 'Sort field (default: -date_created)'
        in: query
        name: sort
        type: string
      - description: 'Limit number of items (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Offset for pagination (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of events retrieved successfully
          schema:
            $ref: '#/definitions/api.EventListResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error or Directus failure
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Retrieve list of events
      tags:
      - Events
  /api/events/{id}:
    get:
      consumes:
      - application/json
      description: Returns detailed information about a specific event, including
        category, images, and schedule data.
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event details retrieved successfully
          schema:
            $ref: '#/definitions/api.Event'
        "400":
          description: Invalid or missing event ID
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error or failed to communicate with Directus
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Retrieve a single event by ID
      tags:
      - Events
  /api/profile:
    get:
      consumes:
      - application/json
      description: Get user profile
      produces:
      - application/json
      responses:
        "200":
          description: user profile
          schema:
            $ref: '#/definitions/api.ProfileResponse'
        "400":
          description: Invalid request body or incorrect credentials
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "403":
          description: Account not active, cannot login
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: User profile
      tags:
      - Profile
    put:
      consumes:
      - application/json
      description: |-
        Updates the current user's profile information including first name, last name, password, and avatar.
        The avatar is expected to be a base64-encoded image, which will be uploaded to cloud storage and replaced with its secure URL.
      parameters:
      - description: Profile update request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/api.ProfileResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Profile
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
